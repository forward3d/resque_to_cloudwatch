#!/usr/bin/env ruby

require 'redis'
require 'eventmachine'
require 'optparse'
require_relative '../lib/resque_to_cloudwatch'

$log.info "Starting ResqueToCloudwatch"

options = {}
 
OptionParser.new do |opts|
  opts.on("-c", "--config CONFIG", "Config file to load") do |c|
    options[:config] = c
  end
end.parse!

options[:config] ||= "#{File.expand_path("../../config.yaml", __FILE__)}"
config = ResqueToCloudwatch::Config.new(options[:config])

# Initialize senders we're going to use
senders = []
senders << ResqueToCloudwatch::CloudwatchSender.new(config)
senders << ResqueToCloudwatch::GraphiteSender.new(config) if config.enable_graphite
$log.info "Senders in use: #{senders.join(", ")}"
$log.info "Entering EventMachine loop with period of #{config.period} seconds"

# Initialize collectors we're going to use
collectors = []
collectors << ResqueToCloudwatch::QueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::HighPriorityQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::MiniQueueQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::DoRecipesQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::InstantQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::DateTimeQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::FailedQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::WorkersWorkingCollector.new(config)
collectors << ResqueToCloudwatch::WorkersAliveCollector.new(config)
collectors << ResqueToCloudwatch::WorkRemainingCollector.new(config)
collectors << ResqueToCloudwatch::ResqueSchedulerDelayedQueueLengthCollector.new(config)
collectors << ResqueToCloudwatch::ResqueSchedulerDelayedQueueDriftCollector.new(config)
$log.info "Collectors in use: #{collectors.join(", ")}"


EventMachine.run do
  EventMachine.add_periodic_timer(config.period) do
    senders.each do |sender|
      begin
        collectors.each do |collector|
          sender.send_value(collector.get_value, collector.metric_name)
        end
      rescue => e
        $log.error "Exception sending or collecting data with sender #{sender}: #{e.message}"
        e.backtrace.each do |line|
          $log.error line
        end
      end
    end    
  end
end
